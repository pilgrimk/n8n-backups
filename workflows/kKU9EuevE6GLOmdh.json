{
  "active": false,
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Voice File": {
      "main": [
        [
          {
            "node": "Transcribe Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Download Voice File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set Values1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email": {
      "ai_tool": [
        [
          {
            "node": "Email Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Emails": {
      "ai_tool": [
        [
          {
            "node": "Email Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Draft": {
      "ai_tool": [
        [
          {
            "node": "Email Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Email Reply": {
      "ai_tool": [
        [
          {
            "node": "Email Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Labels": {
      "ai_tool": [
        [
          {
            "node": "Email Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Label Emails": {
      "ai_tool": [
        [
          {
            "node": "Email Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Mark Unread": {
      "ai_tool": [
        [
          {
            "node": "Email Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Email Agent": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Event with Attendee": {
      "ai_tool": [
        [
          {
            "node": "Calendar Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Event": {
      "ai_tool": [
        [
          {
            "node": "Calendar Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Events": {
      "ai_tool": [
        [
          {
            "node": "Calendar Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Delete Event": {
      "ai_tool": [
        [
          {
            "node": "Calendar Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Event": {
      "ai_tool": [
        [
          {
            "node": "Calendar Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Calendar Agent": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Contact Agent": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Perplexity": {
      "ai_tool": [
        [
          {
            "node": "Web Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenWeatherMap": {
      "ai_tool": [
        [
          {
            "node": "Web Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Web Agent": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "GPT 4.1-mini": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "GPT 4.1-mini1": {
      "ai_languageModel": [
        [
          {
            "node": "Email Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "GPT 4.1-mini2": {
      "ai_languageModel": [
        [
          {
            "node": "Calendar Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "GPT 4.1-mini3": {
      "ai_languageModel": [
        [
          {
            "node": "Contact Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "GPT 4.1-mini4": {
      "ai_languageModel": [
        [
          {
            "node": "Web Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Clean Up",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Logging",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean Up": {
      "main": [
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append row in sheet": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Think": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Input": {
      "main": [
        [
          {
            "node": "Execute Workflow3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a Contact": {
      "ai_tool": [
        [
          {
            "node": "Contact Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Contact": {
      "ai_tool": [
        [
          {
            "node": "Contact Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Contact": {
      "ai_tool": [
        [
          {
            "node": "Contact Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get All Contacts": {
      "ai_tool": [
        [
          {
            "node": "Contact Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Logging": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search in Tavily": {
      "ai_tool": [
        [
          {
            "node": "Web Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Set 'Text'1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set 'Text'1": {
      "main": [
        [
          {
            "node": "Execute Workflow1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe Audio": {
      "main": [
        [
          {
            "node": "Set Values",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow1": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set 'Text'2": {
      "main": [
        [
          {
            "node": "Execute Workflow2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow2": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Set 'Text'2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Respond to Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow3": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Values1": {
      "main": [
        [
          {
            "node": "Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Values": {
      "main": [
        [
          {
            "node": "Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack Trigger": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Set Values2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set Values3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Values2": {
      "main": [
        [
          {
            "node": "Input1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input1": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Values3": {
      "main": [
        [
          {
            "node": "Input1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-08T01:27:43.143Z",
  "id": "kKU9EuevE6GLOmdh",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Agent Swarm",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "c8272a1d-995b-4c67-80c5-4994684cfa1f",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [
        -1296,
        -304
      ],
      "webhookId": "99eab1a0-569d-4f0f-a49e-578a02abfe63",
      "credentials": {
        "telegramApi": {
          "id": "ONfAjXmFhulPUMP1",
          "name": "Telegram- Access Token"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.message.voice.file_id }}",
        "additionalFields": {}
      },
      "id": "ae094965-192a-449d-9270-2d19a3f8bd24",
      "name": "Download Voice File",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -848,
        -400
      ],
      "webhookId": "c0b376b1-7b63-41b6-8063-0b3096b8333d",
      "credentials": {
        "telegramApi": {
          "id": "ONfAjXmFhulPUMP1",
          "name": "Telegram- Access Token"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.voice.file_id }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Voice"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8c844924-b2ed-48b0-935c-c66a8fd0c778",
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text"
            }
          ]
        },
        "options": {}
      },
      "id": "66e64abc-38d6-4bbd-af0e-0e2c751967f5",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1088,
        -304
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.input }}",
        "options": {
          "systemMessage": "=# Overview\nYou are the ultimate personal assistant. Your job is to send the user's query to the correct tool. You should never be writing emails or creating summaries — your sole responsibility is to call the correct tool.\n\n## Tools\n- **Think**: Use this to think deeply or if you get stuck\n- **Email Agent**: Use this tool to take action in email\n- **Calendar Agent**: Use this tool to take action in calendar\n- **Contact Agent**: Use this tool to get, update, or add contacts\n- **Web Agent**: Use this tool to perform deeper web research or get current weather info\n\n## Rules\n- Some actions require you to look up contact information first. For the following actions, you must get contact information and send that to the agent who needs it:\n  - sending emails\n  - drafting emails\n  - creating calendar event with attendees\n\n## Instructions\n1) Call the necessary tools based on the user's request\n2) Use the **Think** tool to verify you took the right steps. This tool should be called every time.\n\n## Examples\n1) \n- Input: send an email to Kevin Pilgrim asking him what time he wants to leave  \n  - Action: Use **Contact Agent** to get Kevin Pilgrim's email  \n  - Action: Use **Email Agent** to send the email. You will pass the tool a query like:  \n    \"send Kevin Pilgrim an email to ask what time he wants to leave. here is his email: [email address]\"\n- Output: The email has been sent to Kevin Pilgrim. Anything else I can help you with?\n\n## Final Reminders\nHere is the current date/time: {{ $now }}\nMy timezone is America/Phoenix\n",
          "returnIntermediateSteps": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        192,
        128
      ],
      "id": "bdf45d96-0957-42f3-9095-7f2ae31c7e23",
      "name": "AI Agent",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "sendTo": "={{ $fromAI(\"emailAddress\") }}",
        "subject": "={{ $fromAI(\"subject\") }}",
        "message": "={{ $fromAI(\"emailBody\") }}",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        -560,
        736
      ],
      "id": "0508731a-0b49-4a7e-9c08-532b621c5452",
      "name": "Send Email",
      "webhookId": "86c8c4b1-13bb-4ebe-acb9-30e1d7082d55",
      "credentials": {
        "gmailOAuth2": {
          "id": "5Y9wNFS6LeDTwIMn",
          "name": "Gmail OAuth2- pilgrimka1@gmail"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "limit": "={{ $fromAI(\"limit\",\"how many emails the user wants\") }}",
        "simple": false,
        "filters": {
          "sender": "={{ $fromAI(\"sender\",\"who the emails are from\") }}"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        -432,
        736
      ],
      "id": "5bd6412c-b386-45ad-8ba0-2db447c97618",
      "name": "Get Emails",
      "webhookId": "af4b3298-9037-44b0-aa12-2acbfbb5e66f",
      "credentials": {
        "gmailOAuth2": {
          "id": "5Y9wNFS6LeDTwIMn",
          "name": "Gmail OAuth2- pilgrimka1@gmail"
        }
      }
    },
    {
      "parameters": {
        "resource": "draft",
        "subject": "={{ $fromAI(\"subject\") }}",
        "emailType": "html",
        "message": "={{ $fromAI(\"emailBody\") }}",
        "options": {
          "threadId": "={{ $fromAI(\"threadID\") }}",
          "sendTo": "={{ $fromAI(\"emailAddress\") }}"
        }
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        -304,
        736
      ],
      "id": "65df6ab9-6dbc-48c9-8afb-236d50839dda",
      "name": "Create Draft",
      "webhookId": "17016bce-d7d7-428a-a56c-f6ea122db8be",
      "credentials": {
        "gmailOAuth2": {
          "id": "5Y9wNFS6LeDTwIMn",
          "name": "Gmail OAuth2- pilgrimka1@gmail"
        }
      }
    },
    {
      "parameters": {
        "operation": "reply",
        "messageId": "={{ $fromAI(\"ID\",\"the message ID\") }}",
        "message": "={{ $fromAI(\"emailBody\") }}",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        -176,
        736
      ],
      "id": "169e5984-8fab-4276-b7e9-098f3ac4099f",
      "name": "Email Reply",
      "webhookId": "114785e6-a859-432b-81b4-c490c1c35b1c",
      "credentials": {
        "gmailOAuth2": {
          "id": "5Y9wNFS6LeDTwIMn",
          "name": "Gmail OAuth2- pilgrimka1@gmail"
        }
      }
    },
    {
      "parameters": {
        "resource": "label",
        "returnAll": true
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        -48,
        736
      ],
      "id": "c901ffaf-2b1b-474b-a055-e123772e9adb",
      "name": "Get Labels",
      "webhookId": "9e08b59e-792d-4566-83f1-9263c9ad86ae",
      "credentials": {
        "gmailOAuth2": {
          "id": "5Y9wNFS6LeDTwIMn",
          "name": "Gmail OAuth2- pilgrimka1@gmail"
        }
      }
    },
    {
      "parameters": {
        "operation": "addLabels",
        "messageId": "={{ $fromAI(\"ID\",\"the ID of the message\") }}",
        "labelIds": "={{ $fromAI(\"labelID\") }}"
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        80,
        736
      ],
      "id": "ee5808e9-8a62-432c-b8f3-935202f679cf",
      "name": "Label Emails",
      "webhookId": "0e951529-2e6d-40bf-ac40-fc0947e242e2",
      "credentials": {
        "gmailOAuth2": {
          "id": "5Y9wNFS6LeDTwIMn",
          "name": "Gmail OAuth2- pilgrimka1@gmail"
        }
      }
    },
    {
      "parameters": {
        "operation": "markAsUnread",
        "messageId": "={{ $fromAI(\"messageID\") }}"
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        208,
        736
      ],
      "id": "b9b1de95-5fdd-4bd5-aa33-9f094553e091",
      "name": "Mark Unread",
      "webhookId": "a35af9d8-f67d-4ff9-803f-59ec6356e795",
      "credentials": {
        "gmailOAuth2": {
          "id": "5Y9wNFS6LeDTwIMn",
          "name": "Gmail OAuth2- pilgrimka1@gmail"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "An email agent for all email actions",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {
          "systemMessage": "=# Overview\nYou are an email management assistant. All emails must be formatted professionally in HTML and signed off as \"Nate.\" \n\n**Email Management Tools**   \n   - Use \"Send Email\" to send emails.  \n   - Use \"Create Draft\" if the user asks for a draft.  \n   - Use \"Get Emails\" to retrieve emails when requested.\n   - Use \"Get Labels\" to retrieve labels.\n   - Use \"Mark Unread\" to mark an email as unread. You must use \"Get Emails\" first so you have the message ID of the email to flag.\n   - Use \"Label Email\" to flag an email. You must use \"Get Emails\" first so you have the message ID of the email to flag. Then you must use \"Get Labels\" so you have the label ID.\n   - Use \"Email Reply\" to reply to an email. You must use \"Get Emails\" first so you have the message ID of the email to reply to.\n\n## Final Notes\n- Here is the current date/time: {{ $now }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        -320,
        528
      ],
      "id": "6414590b-48b6-4359-8cab-db594cd4e8bf",
      "name": "Email Agent"
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "pilgrimka1@gmail.com",
          "mode": "list",
          "cachedResultName": "pilgrimka1@gmail.com"
        },
        "start": "={{ $fromAI(\"eventStart\") }}",
        "end": "={{ $fromAI(\"eventEnd\") }}",
        "additionalFields": {
          "attendees": [
            "={{ $fromAI(\"eventAttendeeEmail\") }}"
          ],
          "summary": "={{ $fromAI(\"eventTitle\") }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        464,
        736
      ],
      "id": "e61d4842-b0e2-473c-84fc-04e24f4f9537",
      "name": "Create Event with Attendee",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "lEmb5Z9SRXAqUgwe",
          "name": "Google Calendar- OAuth2 pilgrimka1@gmail"
        }
      }
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "pilgrimka1@gmail.com",
          "mode": "list",
          "cachedResultName": "pilgrimka1@gmail.com"
        },
        "start": "={{ $fromAI(\"eventStart\") }}",
        "end": "={{ $fromAI(\"eventEnd\") }}",
        "additionalFields": {
          "attendees": [],
          "summary": "={{ $fromAI(\"eventTitle\") }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        592,
        736
      ],
      "id": "1e9ed43b-4bf7-4986-bebb-d013969b9ad3",
      "name": "Create Event",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "lEmb5Z9SRXAqUgwe",
          "name": "Google Calendar- OAuth2 pilgrimka1@gmail"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "pilgrimka1@gmail.com",
          "mode": "list",
          "cachedResultName": "pilgrimka1@gmail.com"
        },
        "timeMin": "={{ $fromAI(\"dayBefore\",\"the day before the date the user requested\") }}",
        "timeMax": "={{ $fromAI(\"dayAfter\",\"the day after the date the user requested\") }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        720,
        736
      ],
      "id": "1186c148-54fa-41e0-b504-77bc71f024aa",
      "name": "Get Events",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "lEmb5Z9SRXAqUgwe",
          "name": "Google Calendar- OAuth2 pilgrimka1@gmail"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "calendar": {
          "__rl": true,
          "value": "pilgrimka1@gmail.com",
          "mode": "list",
          "cachedResultName": "pilgrimka1@gmail.com"
        },
        "eventId": "={{ $fromAI(\"eventID\") }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        848,
        736
      ],
      "id": "ea08e808-e54e-4582-a2f6-0e90bc5f56b8",
      "name": "Delete Event",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "lEmb5Z9SRXAqUgwe",
          "name": "Google Calendar- OAuth2 pilgrimka1@gmail"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "calendar": {
          "__rl": true,
          "value": "pilgrimka1@gmail.com",
          "mode": "list",
          "cachedResultName": "pilgrimka1@gmail.com"
        },
        "eventId": "={{ $fromAI(\"eventID\") }}",
        "updateFields": {
          "end": "={{ $fromAI(\"endTime\") }}",
          "start": "={{ $fromAI(\"startTime\") }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        976,
        736
      ],
      "id": "50c87eac-5ea3-4ecf-a1ba-62d1a7e0fa11",
      "name": "Update Event",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "lEmb5Z9SRXAqUgwe",
          "name": "Google Calendar- OAuth2 pilgrimka1@gmail"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "A calendar agent for all calendar actions",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {
          "systemMessage": "=# Overview\nYou are a calendar assistant. Your responsibilities include creating, getting, and deleting events in the user's calendar.\n\n**Calendar Management Tools**  \n   - Use \"Create Event with Attendee\" when an event includes a participant.  \n   - Use \"Create Event\" for solo events.   \n   - Use \"Get Events\" to fetch calendar schedules when requested.\n   - Use \"Delete Event\" to delete an event. You must use \"Get Events\" first to get the ID of the event to delete.\n   - Use \"Update Event\" to update an event. You must use \"Get Events\" first to get the ID of the event to update.\n\n## Final Notes\nHere is the current date/time: {{ $now }}\nIf a duration for an event isn't specified, assume it will be one hour."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        624,
        528
      ],
      "id": "d41860ee-9376-41cb-a5d0-3be3598122b0",
      "name": "Calendar Agent"
    },
    {
      "parameters": {
        "toolDescription": "Contact agent for all contact actions, like getting contacts",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {
          "systemMessage": "=# Overview\nYou are a contact management assistant. Your responsibilities include looking up one or many contacts, adding new contacts, or updating a contact's information.\n\n**Contact Management**  \n   - Use \"Get a Contact\" to retrieve a specified contact's information. \n   - Use \"Get All Contacts\" to search for one or more matching contact's information. \n   - Use \"Create Contact\" to store new contact information. \n   - Use \"Update Contact\" to modify existing entries."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        1328,
        528
      ],
      "id": "11519717-ea4e-46aa-a145-9eeb5d462e11",
      "name": "Contact Agent"
    },
    {
      "parameters": {
        "model": "sonar",
        "messages": {
          "message": [
            {
              "content": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('message0_Text', ``, 'string') }}"
            }
          ]
        },
        "options": {},
        "requestOptions": {}
      },
      "type": "n8n-nodes-base.perplexityTool",
      "typeVersion": 1,
      "position": [
        1872,
        736
      ],
      "id": "86c83cc8-f108-4f11-a011-56e45f779a9a",
      "name": "Perplexity",
      "credentials": {
        "perplexityApi": {
          "id": "3VqNC1u244b8uHEX",
          "name": "Perplexity API Key"
        }
      }
    },
    {
      "parameters": {
        "format": "imperial",
        "cityName": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('City', ``, 'string') }}",
        "language": "en"
      },
      "type": "n8n-nodes-base.openWeatherMapTool",
      "typeVersion": 1,
      "position": [
        2000,
        736
      ],
      "id": "c075ff5e-694d-47e9-a585-379fab645378",
      "name": "OpenWeatherMap",
      "credentials": {
        "openWeatherMapApi": {
          "id": "MqBALYlJeZ7jvz9o",
          "name": "OpenWeatherMap Access Token"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "A research agent for all research actions",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {
          "systemMessage": "=# Overview\nYou are a web research assistant. Your responsibilities include conducting quick web searches, performing deeper research, and retrieving current weather information. \n\n**Web Search & Research**  \n   - Use **Tavily** for quick factual lookups, recent news, or verifying specific pieces of information.  \n   - Use **Perplexity** when a question requires deeper research, multiple perspectives, or synthesized answers from various sources.  \n\n**Weather Information**  \n   - Use **Open Weather Map** to retrieve current weather data, including temperature, conditions, and forecasts for a given location.\n\nAlways explain your reasoning briefly when choosing between Tavily and Perplexity. Prioritize clarity, credibility, and helpfulness in your responses.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        1792,
        528
      ],
      "id": "36c23a9c-b810-47b7-bb1f-6ab08c73e157",
      "name": "Web Agent"
    },
    {
      "parameters": {
        "model": "openai/gpt-5-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -576,
        528
      ],
      "id": "f020f282-e225-4b68-b051-c21ab7d32166",
      "name": "GPT 4.1-mini",
      "credentials": {
        "openRouterApi": {
          "id": "hsn72KnexVfvB6f5",
          "name": "OpenRouter API Key"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -688,
        736
      ],
      "id": "67481393-6f96-444c-83c0-3310999882c3",
      "name": "GPT 4.1-mini1",
      "credentials": {
        "openRouterApi": {
          "id": "hsn72KnexVfvB6f5",
          "name": "OpenRouter API Key"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        336,
        736
      ],
      "id": "bd52d56c-ee24-423c-a92f-0a49cfc89d41",
      "name": "GPT 4.1-mini2",
      "credentials": {
        "openRouterApi": {
          "id": "hsn72KnexVfvB6f5",
          "name": "OpenRouter API Key"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1104,
        736
      ],
      "id": "b38883fc-ffee-4434-9d9c-a9bc91361ba6",
      "name": "GPT 4.1-mini3",
      "credentials": {
        "openRouterApi": {
          "id": "hsn72KnexVfvB6f5",
          "name": "OpenRouter API Key"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1744,
        736
      ],
      "id": "d37be917-56ed-47d6-b874-b704375f69d0",
      "name": "GPT 4.1-mini4",
      "credentials": {
        "openRouterApi": {
          "id": "hsn72KnexVfvB6f5",
          "name": "OpenRouter API Key"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// ---- Collectors\nconst steps = [];\nconst tokens = [];\nlet totalTokens = 0;\nlet agentMessage = \"\";\n\n// Try to get `output` from a step.observation JSON string\nconst extractOutputFromObservation = (obs) => {\n  if (typeof obs !== 'string') return null;\n  try {\n    const parsed = JSON.parse(obs);\n    if (Array.isArray(parsed) && parsed.length && typeof parsed[0]?.output === 'string') {\n      return parsed[0].output;\n    }\n    if (parsed && typeof parsed.output === 'string') {\n      return parsed.output;\n    }\n  } catch (_) {}\n  return null;\n};\n\n// Iterate inputs once\nfor (const { json: data } of $input.all()) {\n  // Prefer direct output when present\n  if (data && typeof data.output === 'string' && !agentMessage) {\n    agentMessage = data.output;\n  }\n\n  const stepsArr = data?.intermediateSteps;\n  if (Array.isArray(stepsArr)) {\n    for (const step of stepsArr) {\n      if (step?.action) {\n        steps.push({\n          tool: step.action.tool,\n          toolInput: step.action.toolInput,\n          observation: step.observation,\n        });\n      }\n\n      // Token usage\n      const msgLog = step?.action?.messageLog;\n      if (Array.isArray(msgLog)) {\n        for (const message of msgLog) {\n          const usage = message?.kwargs?.response_metadata?.usage;\n          if (usage) {\n            tokens.push({\n              prompt_tokens: usage.prompt_tokens,\n              completion_tokens: usage.completion_tokens,\n              total_tokens: usage.total_tokens,\n              model_name: message.kwargs.response_metadata.model_name,\n            });\n            if (typeof usage.total_tokens === 'number') totalTokens += usage.total_tokens;\n          }\n        }\n      }\n\n      // If we still don't have the readable text, try to extract it from observation\n      if (!agentMessage) {\n        const fromObs = extractOutputFromObservation(step?.observation);\n        if (fromObs) agentMessage = fromObs;\n      }\n    }\n  }\n}\n\n// Build outputs\nconst plainText = agentMessage || \"\";\n\n// MarkdownV2 code block wrapper (nothing inside needs escaping)\nconst toMdV2CodeBlock = (s) => {\n  // Neutralize any accidental ``` inside the content to keep the fence intact\n  const safe = String(s).replace(/```/g, '\\\\`\\\\`\\\\`');\n  return '```\\n' + safe + '\\n```';\n};\nconst mdv2CodeBlock = agentMessage ? toMdV2CodeBlock(agentMessage) : '';\n\nreturn [{\n  json: {\n    steps,\n    tokens,\n    total_tokens: totalTokens,\n    plainText,     // Use when Parse Mode is removed/blank (no markdown)\n    mdv2CodeBlock, // Use when Parse Mode = MarkdownV2\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1632,
        112
      ],
      "id": "5281774d-536a-4f32-a722-1fafec2f45da",
      "name": "Clean Up"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1EpjX8H8_X7Z40mXzmcw9zRc4lK1eAMmduBUr4KH1Clg",
          "mode": "list",
          "cachedResultName": "Agent Logging",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1EpjX8H8_X7Z40mXzmcw9zRc4lK1eAMmduBUr4KH1Clg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 18245879,
          "mode": "list",
          "cachedResultName": "AgentSwarm",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1EpjX8H8_X7Z40mXzmcw9zRc4lK1eAMmduBUr4KH1Clg/edit#gid=18245879"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "steps": "={{ $json.steps.toJsonString() }}",
            "tokens": "={{ $json.tokens }}",
            "total_tokens": "={{ $json.total_tokens }}",
            "plainText": "={{ $json.plainText }}",
            "mdv2CodeBlock": "={{ $json.mdv2CodeBlock }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "steps",
              "displayName": "steps",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "tokens",
              "displayName": "tokens",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "total_tokens",
              "displayName": "total_tokens",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "plainText",
              "displayName": "plainText",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "mdv2CodeBlock",
              "displayName": "mdv2CodeBlock",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        1856,
        112
      ],
      "id": "9c4a2e64-3333-49bd-a891-4f5a3602ac8e",
      "name": "Append row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "8s3KYjA1a6mtPebt",
          "name": "Google Sheets- OAuth2- pilgrimka1@gmail"
        }
      },
      "disabled": true
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1,
      "position": [
        2080,
        528
      ],
      "id": "0670fbd8-59c5-43b9-a364-e4055cc0a0cb",
      "name": "Think"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -448,
        528
      ],
      "id": "c750e721-bc29-4d90-a8bd-f062b6e3a9a9",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.mdv2CodeBlock }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "MarkdownV2"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        192,
        -304
      ],
      "id": "005f66e6-d425-4e3e-a245-11edb15c153c",
      "name": "Response",
      "webhookId": "4d174459-d5cc-4297-a449-369d3f10ef23",
      "credentials": {
        "telegramApi": {
          "id": "ONfAjXmFhulPUMP1",
          "name": "Telegram- Access Token"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"sessionId\": \"{{ $json.sessionId }}\",\n  \"input\": \"{{ $json.input }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -192,
        -304
      ],
      "id": "e3c326b4-3cac-4b61-b21f-4b63caafe392",
      "name": "Input"
    },
    {
      "parameters": {
        "query": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Query', ``, 'string') }}",
        "options": {}
      },
      "type": "@tavily/n8n-nodes-tavily.tavilyTool",
      "typeVersion": 1,
      "position": [
        2160,
        736
      ],
      "id": "d0daf695-2fe3-44d9-b6f4-9c5d326aa5a6",
      "name": "Search in Tavily",
      "credentials": {
        "tavilyApi": {
          "id": "5ve3QimI5TohWpxs",
          "name": "Tavily API Key"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "contactId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Contact_ID', ``, 'string') }}",
        "fields": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Fields', ``, 'string') }}"
      },
      "type": "n8n-nodes-base.googleContactsTool",
      "typeVersion": 1,
      "position": [
        1232,
        736
      ],
      "id": "8e929fd7-8c65-4c0d-9c53-008377c5a289",
      "name": "Get a Contact",
      "credentials": {
        "googleContactsOAuth2Api": {
          "id": "CfPfmph8RJKms1Hl",
          "name": "Google Contacts- OAuth pilgrimka1@gmail"
        }
      }
    },
    {
      "parameters": {
        "familyName": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Family_Name', ``, 'string') }}",
        "givenName": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Given_Name', ``, 'string') }}",
        "additionalFields": {
          "birthday": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Birthday', ``, 'string') }}",
          "emailsUi": {
            "emailsValues": [
              {
                "type": "work",
                "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('emailsValues0_Value', ``, 'string') }}"
              },
              {
                "type": "home",
                "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('emailsValues1_Value', ``, 'string') }}"
              }
            ]
          },
          "phoneUi": {
            "phoneValues": [
              {
                "type": "mobile",
                "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('phoneValues0_Value', ``, 'string') }}"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.googleContactsTool",
      "typeVersion": 1,
      "position": [
        1360,
        736
      ],
      "id": "f2ce7f0e-8027-46a6-9cd9-ecfceb5a54ac",
      "name": "Create Contact",
      "credentials": {
        "googleContactsOAuth2Api": {
          "id": "CfPfmph8RJKms1Hl",
          "name": "Google Contacts- OAuth pilgrimka1@gmail"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "contactId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Contact_ID', ``, 'string') }}",
        "fields": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Fields', ``, 'string') }}",
        "updateFields": {
          "birthday": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Birthday', ``, 'string') }}",
          "emailsUi": {
            "emailsValues": [
              {
                "type": "home",
                "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('emailsValues0_Value', ``, 'string') }}"
              },
              {
                "type": "work",
                "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('emailsValues1_Value', ``, 'string') }}"
              }
            ]
          },
          "biographies": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Notes', ``, 'string') }}",
          "phoneUi": {
            "phoneValues": [
              {
                "type": "home",
                "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('phoneValues0_Value', ``, 'string') }}"
              },
              {
                "type": "mobile",
                "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('phoneValues1_Value', ``, 'string') }}"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.googleContactsTool",
      "typeVersion": 1,
      "position": [
        1488,
        736
      ],
      "id": "4a4545fc-fcf2-4544-93e1-9c9bf4ff02ae",
      "name": "Update Contact",
      "credentials": {
        "googleContactsOAuth2Api": {
          "id": "CfPfmph8RJKms1Hl",
          "name": "Google Contacts- OAuth pilgrimka1@gmail"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}",
        "fields": [
          "names",
          "emailAddresses",
          "phoneNumbers",
          "addresses",
          "organizations"
        ],
        "useQuery": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Use_Query', ``, 'boolean') }}",
        "query": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Query', ``, 'string') }}",
        "rawData": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('RAW_Data', ``, 'boolean') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleContactsTool",
      "typeVersion": 1,
      "position": [
        1616,
        736
      ],
      "id": "61abcc85-ac90-4ab7-b6e3-b80956ad79d2",
      "name": "Get All Contacts",
      "credentials": {
        "googleContactsOAuth2Api": {
          "id": "CfPfmph8RJKms1Hl",
          "name": "Google Contacts- OAuth pilgrimka1@gmail"
        }
      }
    },
    {
      "parameters": {
        "inputSource": "jsonExample",
        "jsonExample": "{\n\"sessionId\": \"c9d6788c-93c7-4aa3-acb7-e85abe8a8e19\",\n\"input\": \"Get me Taeya Pilgrim's contact info please.\"\n}"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -688,
        128
      ],
      "id": "d70ff060-6136-45ca-87e3-bbf21c4de46a",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2080,
        208
      ],
      "id": "1b96d885-085f-4531-abce-a9816d2d6925",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"errMsg\": \"Error message: \"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1856,
        304
      ],
      "id": "ab20944c-243d-41af-bf17-aa01de1c5959",
      "name": "Error Logging"
    },
    {
      "parameters": {
        "content": "### Appointment Scheduler – Overview\n\nThis sub-workflow serves as the **managing agent** for routing user queries to the correct sub-agent.\nAvailable agents include:\n\n* **Email Agent**\n* **Calendar Agent**\n* **Contact Agent**\n* **Web Agent**\n\n### Input format\n\nThe workflow is invoked with a JSON payload containing a session ID and user message:\n\n{\n  \"sessionId\": \"c9d6788c-93c7-4aa3-acb7-e85abe8a8e19\",\n  \"input\": \"Get me John Doe's contact info please.\"\n}\n\n### Output format\n\nThe response is returned as a JSON array with agent reasoning steps and the final plain-text answer. Example (shortened):\n\n[\n  {\n    \"steps\": \"[{...}]\",\n    \"plainText\": \"Here’s your response message.\"\n  }\n]\n\nThe `plainText` field is the final user-facing message, while `steps` contains the internal tool-calling and reasoning trail.",
        "height": 880,
        "width": 3856
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1536,
        32
      ],
      "typeVersion": 1,
      "id": "5c531736-0afa-4315-98d7-73b36dae45b2",
      "name": "Sticky Note"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        832,
        -384
      ],
      "id": "ed8b7f57-8cf8-4991-965c-d22afd0a523e",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "\n{\n   \"sessionId\": \"c9d6788c-93c7-4aa3-acb7-e85abe8a8e19\",\n   \"input\": \"Get me Taeya Pilgrim's contact info please.\"\n}\n",
        "options": {}
      },
      "id": "4654b47b-de75-4065-bec1-52e9585e88c2",
      "name": "Set 'Text'1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1056,
        -384
      ]
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "kKU9EuevE6GLOmdh",
          "mode": "list",
          "cachedResultName": "Agent Swarm"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "sessionId": "={{ $json.sessionId }}",
            "input": "={{ $json.input }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "sessionId",
              "displayName": "sessionId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "input",
              "displayName": "input",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1280,
        -384
      ],
      "id": "a718b7f8-dba7-4d82-bba7-5129fe77e218",
      "name": "Execute Workflow1"
    },
    {
      "parameters": {
        "content": "## Telegram",
        "height": 496,
        "width": 1952,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1520,
        -496
      ],
      "typeVersion": 1,
      "id": "a8e48f08-ea34-43ca-8692-ee23faf594f7",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "id": "07422a88-5d0d-4225-9699-a23ea91e83e4",
      "name": "Transcribe Audio",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.6,
      "position": [
        -656,
        -400
      ],
      "credentials": {
        "openAiApi": {
          "id": "q3gPWSga9sOawaqA",
          "name": "OpenAi API Key- KAP Enterprises"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"plainText\": {{ $json.plainText.toJsonString() }},\n  \"mdv2CodeBlock\": {{ $json.mdv2CodeBlock.toJsonString() }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1488,
        -384
      ],
      "id": "395b5831-36ae-4b7f-b7bd-9a59a5c228b8",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "options": {
          "responseMode": "responseNodes"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        832,
        -208
      ],
      "id": "e0043ff2-70d0-46f5-b500-591df160ff56",
      "name": "When chat message received",
      "webhookId": "18bf238b-63fa-4e2a-9203-5fe3667c4e74"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n   \"sessionId\": \"{{ $json.sessionId }}\",\n   \"input\": \"{{ $json.chatInput }}\"\n}\n",
        "options": {}
      },
      "id": "04402a6b-268d-4d2c-aba0-dea85d1967ba",
      "name": "Set 'Text'2",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1056,
        -208
      ]
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "kKU9EuevE6GLOmdh",
          "mode": "list",
          "cachedResultName": "Agent Swarm"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "sessionId": "={{ $json.sessionId }}",
            "input": "={{ $json.input }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "sessionId",
              "displayName": "sessionId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "input",
              "displayName": "input",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1280,
        -208
      ],
      "id": "e70a6609-4a57-4400-a8d6-3607ce85b6ab",
      "name": "Execute Workflow2"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"plainText\": {{ $json.plainText.toJsonString() }},\n  \"mdv2CodeBlock\": {{ $json.mdv2CodeBlock.toJsonString() }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1488,
        -208
      ],
      "id": "f1753f38-8331-42b7-a782-f4b8bdacb11d",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "message": "={{ $json.plainText }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chat",
      "typeVersion": 1,
      "position": [
        1696,
        -208
      ],
      "id": "e64bb757-d2de-4369-8b9f-5a4c624fd604",
      "name": "Respond to Chat"
    },
    {
      "parameters": {
        "content": "## Manual Testing",
        "height": 496,
        "width": 1856,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        464,
        -496
      ],
      "typeVersion": 1,
      "id": "565ae39a-dde8-4d7c-8517-c5dbd3d526d0",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "kKU9EuevE6GLOmdh",
          "mode": "list",
          "cachedResultName": "Agent Swarm"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "sessionId": "={{ $json.sessionId }}",
            "input": "={{ $json.input }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "sessionId",
              "displayName": "sessionId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "input",
              "displayName": "input",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        0,
        -304
      ],
      "id": "0d1f662b-72a4-4ef4-948f-56aace6bf29b",
      "name": "Execute Workflow3"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"sessionId\": \"{{ $('Telegram Trigger').item.json.update_id }}\",\n  \"input\": \"{{ $json.message.text }}\"\n}\n",
        "options": {}
      },
      "id": "76225f6c-c1b8-4760-816e-42b4be941ff5",
      "name": "Set Values1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -464,
        -208
      ]
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"sessionId\": \"{{ $('Telegram Trigger').item.json.update_id }}\",\n  \"input\": \"{{ $json.text }}\"\n}\n",
        "options": {}
      },
      "id": "80351941-a30a-4465-af6c-a384d5733e55",
      "name": "Set Values",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -464,
        -400
      ]
    },
    {
      "parameters": {
        "content": "## Slack",
        "height": 496,
        "width": 1952,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1520,
        -1024
      ],
      "typeVersion": 1,
      "id": "950f4ea5-28a5-4935-a3cd-6e149081d409",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "trigger": [
          "message"
        ],
        "channelId": {
          "__rl": true,
          "value": "C09A5Q8HSR4",
          "mode": "list",
          "cachedResultName": "contact-agent"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.slackTrigger",
      "typeVersion": 1,
      "position": [
        -1296,
        -800
      ],
      "id": "5c2ccd32-c01f-461e-9656-7447640cec48",
      "name": "Slack Trigger",
      "webhookId": "0c285ce1-d3a6-4fb9-adef-116425e92b08",
      "credentials": {
        "slackApi": {
          "id": "sr382J9JbWBqeTMn",
          "name": "Slack Access Token"
        }
      }
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09A5Q8HSR4",
          "mode": "list",
          "cachedResultName": "contact-agent"
        },
        "text": "={{ $json.plainText }}",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        -192,
        -800
      ],
      "id": "02ce05a1-e517-4e2a-8484-b597b96ccf45",
      "name": "Send a message",
      "webhookId": "98bf5cf8-9342-436e-8ddc-d59b645bf185",
      "credentials": {
        "slackApi": {
          "id": "sr382J9JbWBqeTMn",
          "name": "Slack Access Token"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.files[0].mimetype }}",
                    "rightValue": "audio/mp4",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "a60fcbe1-2674-4d6a-975f-80a470111e62"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "be3fa88e-54eb-4313-86e6-346553d6f574",
                    "leftValue": "={{ $json.type }}",
                    "rightValue": "message",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "message"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1088,
        -800
      ],
      "id": "af741ff6-db09-4796-b3c7-065375a3ba75",
      "name": "Switch1"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"sessionId\": \"{{ $json.user }}\",\n  \"input\": \"{{ $json.files[0].transcription.preview.content }}\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -880,
        -912
      ],
      "id": "deb80cb6-5369-4c63-aab6-25633a62a8d3",
      "name": "Set Values2"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"sessionId\": \"{{ $json.sessionId }}\",\n  \"input\": \"{{ $json.input }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -672,
        -800
      ],
      "id": "7870e800-3d8d-4387-b927-dbf4a147eb5d",
      "name": "Input1"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "kKU9EuevE6GLOmdh",
          "mode": "list",
          "cachedResultName": "Agent Swarm"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "sessionId": "={{ $json.sessionId }}",
            "input": "={{ $json.input }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "sessionId",
              "displayName": "sessionId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "input",
              "displayName": "input",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -464,
        -800
      ],
      "id": "174671b9-d17b-43b6-8b8b-954fb5b6bedb",
      "name": "Execute Workflow"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"sessionId\": \"{{ $json.user }}\",\n  \"input\": \"{{ $json.text }}\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -880,
        -704
      ],
      "id": "a0a8dc3b-cb2a-4db4-8166-ec49d6125f93",
      "name": "Set Values3"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-08-08T01:27:43.156Z",
      "updatedAt": "2025-08-08T01:27:43.156Z",
      "role": "workflow:owner",
      "workflowId": "kKU9EuevE6GLOmdh",
      "projectId": "ANrIPEPOHOX0fwPW"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-09-18T02:29:10.000Z",
  "versionId": "c5f4e32f-d415-4c97-8628-ce1d8510c0b0"
}